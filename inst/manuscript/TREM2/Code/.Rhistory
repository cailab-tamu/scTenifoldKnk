cCol <- densCols(DF, colramp = hcl.colors)
ggplot(DF, aes(UMAP_1,UMAP_2)) + geom_point(col = cCol, cex = 0.25) + theme_bw()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("glmGamPoi")
library(glmGamPoi)
rnbinom(100*1000)
rnbinom(100*1000, 10, prob = 0.1)
rnbinom(100*1000, 10, prob = 0.9)
rnbinom(100*1000, 10, prob = 0.99)
rnbinom(100*1000, 10, prob = 0.95)
max(rnbinom(100*1000, 10, prob = 0.95))
matrix(rnbinom(100*1000, 10, prob = 0.95), nrow = 1000)
dta <- matrix(rnbinom(100*1000, 10, prob = 0.95), nrow = 1000)
colnames(dta) <- paste0('c', seq_len(ncol(dta)))
library(glmGamPoi)
/glm_gp()
?glm_gp()
fit <- glm_gp(dta[,1], dta)
fit <- glm_gp(dta, design = model_matrix)
fit <- glm_gp(dta[,1])
fit <- glm_gp(dta[1,])
fit <- glm_gp(dta[,1])
fit <- glm_gp(dta[,1], size_factors = FALSE)
fit
summary(fit)
fit <- glm_gp(dta[,1:10], size_factors = FALSE)
summary(fit)
fit
fit <- glm_gp(dta[,1]~dta[,2], size_factors = FALSE)
fit <- glm_gp(design = dta[,1]~dta[,2], size_factors = FALSE)
fit <- glm_gp(dta[,1], dta[,2], size_factors = FALSE)
fit
summary(fit)
fit <- glm_gp(dta[,1], dta[,2])
summary(fit)
remotes::install_github('cailab-tamu/scTenifoldKnk', auth_token = '8736a29b8f9846b742d1e1d458b4ca38521a402c')
scTenifoldKnk::scTenifoldKnk
D <- read.csv('https://panglaodb.se/csvs/383238a4.csv', sep = '\t')
D <- read.csv('https://panglaodb.se/csvs/383238a4.csv', sep = '\t', header = FALSE)
View(D)
paste0(D$V3, '_', D$V4)
View(D)
table(paste0(D$V3, '_', D$V4), D$V2)
A <- table(paste0(D$V3, '_', D$V4), D$V2)
A != 0
apply(A != 0,1,all)
A[apply(A != 0,1,all),]
D <- read.csv('https://panglaodb.se/csvs/497e423c.csv', sep = '\t', header = FALSE)
A <- table(paste0(D$V3, '_', D$V4), D$V2)
A[apply(A != 0,1,all),]
library(Matrix)
library(harmony)
?RunHarmony()
read.csv('~/MYDGF/koCDC42.csv')
read.csv('~/MYDGF/koCDC42.csv', row.names = 1)
D <- read.csv('~/MYDGF/koCDC42.csv', row.names = 1)
grepl('^CDH', D$gene)
D[grepl('^CDH', D$gene),]
D[grepl('^CTN', D$gene),]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GSVA")
library(GSVA)
p <- 20000    ## number of genes
n <- 30       ## number of samples
nGS <- 100    ## number of gene sets
min.sz <- 10  ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnorm(p*n), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
gs
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1)
es.dif <- gsva(X, gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
es.max
dim(es.max)
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1, method="ssgsea")
es.max
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1, method="ssgsea")
es.max
es.max <- gsva(X[,1], gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1, method="ssgsea")
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1, method="ssgsea")
es.max
es.dif <- gsva(X[,1, drop=FALSE], gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
es.dif
es.dif <- gsva(X[,1:2, drop=FALSE], gs, mx.diff=TRUE, verbose=FALSE, parallel.sz=1)
es.dif
?gsva
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=FALSE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=TRUE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
x[1:10,1:10]
x[1:10,1:10]
X[1:10,1:10]
X <- matrix(rnbinom(p*n, size = 10, prob = 0.8), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
X != 0
X <- matrix(rnbinom(p*n, size = 10, prob = 0.1), nrow=p, dimnames=list(1:p, 1:n))
mean(X != 0)
X <- matrix(rnbinom(p*n, size = 10, prob = 0.95), nrow=p, dimnames=list(1:p, 1:n))
mean(X != 0)
X <- matrix(rnbinom(p*n, size = 10, prob = 0.99), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
mean(X != 0)
X <- matrix(rnbinom(p*n, size = 10, prob = 0.96), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
mean(X != 0)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
View(es.max)
nGS <- 1000   ## number of gene sets
min.sz <- 10  ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnbinom(p*n, size = 10, prob = 0.96), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
mean(X != 0)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
es.max
View(es.max)
es.max <- gsva(X[,1, drop=FALSE], gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
p <- 20000    ## number of genes
n <- 1000       ## number of samples
nGS <- 1000   ## number of gene sets
min.sz <- 10  ## minimum gene set size
max.sz <- 100 ## maximum gene set size
X <- matrix(rnbinom(p*n, size = 10, prob = 0.96), nrow=p, dimnames=list(1:p, 1:n))
dim(X)
mean(X != 0)
gs <- as.list(sample(min.sz:max.sz, size=nGS, replace=TRUE)) ## sample gene set sizes
gs <- lapply(gs, function(n, p) sample(1:p, size=n, replace=FALSE), p) ## sample gene sets
es.max <- gsva(X, gs, mx.diff=FALSE, verbose=TRUE, parallel.sz=1, method="ssgsea", kcdf='Poisson')
es.max
View(es.max)
rnorm(150*150)
matrix(rnorm(150*150), 150, 150)
X <- matrix(rnorm(150*150), 150, 150)
image(X)
X + t(X)
0.5 * (X + t(X))
X <- 0.5 * (X + t(X))
image(X)
nGenes <- 10
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
nGenes <- 10
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
Y <- X
X[1:50,1:50]
Y <- X
Y[1:50,1:50]
Y[1:50,1:50] <- Y[1:50,1:50] * 2
Y
image(Y)
Y[1:50,1:50] <- Y[1:50,1:50] * 10
image(Y)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
lapply(1:10, function(i){
Y <- X
Y[1:50,1:50] <- Y[1:50,1:50] * i
return(Y)
})
iTensor <- lapply(1:10, function(i){
Y <- X
Y[1:50,1:50] <- Y[1:50,1:50] * i
return(Y)
})
library(scTenifoldNet)
scTenifoldNet:::as.tensor(iTensor)
iTensor <- scTenifoldNet:::as.tensor(iTensor)
iTensor
tensorDecomposition(iTensor)
iTensor <- lapply(1:10, function(i){
Y <- X
Y[1:50,1:50] <- Y[1:50,1:50] * i*1/i
return(Y)
})
iTensor <- scTenifoldNet:::as.tensor(iTensor)
tensorDecomposition(iTensor)
matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
(matrix(rnorm(nGenes * nGenes), nGenes, nGenes)) * 0.01
library(scTenifoldNet)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
iTensor <- lapply(1:10, function(i){
Y <- X
Y[1:50,1:50] <- Y[1:50,1:50] * i
Y + (matrix(rnorm(nGenes * nGenes), nGenes, nGenes)) * 0.01
return(Y)
})
iTensor <- scTenifoldNet:::as.tensor(iTensor)
tensorDecomposition(iTensor)
library(scTenifoldNet)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
iTensor <- lapply(1:10, function(i){
Y <- X
Y[1:50,1:50] <- Y[1:50,1:50] * i
Y + (matrix(rnorm(nGenes * nGenes), nGenes, nGenes)) * 0.1
return(Y)
})
iTensor <- scTenifoldNet:::as.tensor(iTensor)
tensorDecomposition(iTensor)
array(, dim = c(nGenes, nGenes,10))
iTensor <- array(, dim = c(nGenes, nGenes,10))
library(rTensor)
iTensor <- array(X, dim = c(nGenes, nGenes,10))
iTensor
as.tensor(iTensor)
iTensor <- as.tensor(iTensor)
cp(iTensor, num_components = 2)
cp(iTensor, num_components = 5)
oTensor <- cp(iTensor, num_components = 5)
oTensor$est@data
oTensor$U
oTensor$U
iTensor <- array(0, dim = c(nGenes, nGenes,10))
iTensor
iTensor <- array(X, dim = c(nGenes, nGenes,10))
iTensor[,,i]
i <- 1
iTensor[,,i]
for(i in 1:10){
iTensor[,,i][1:50,1:50] <- iTensor[,,i][1:50,1:50] * i
}
iTensor <- as.tensor(iTensor)
oTensor <- cp(iTensor, num_components = 5)
oTensor$U
oTensor$U[[3]]
plot(oTensor$U[[3]][,1])
plot(oTensor$U[[3]][,2])
plot(oTensor$U[[3]][,3])
plot(oTensor$U[[3]][,4])
plot(oTensor$U[[3]][,5])
plot(oTensor$U[[3]][,6])
oTensor <- cp(iTensor, num_components = 2)
plot(oTensor$U[[3]][,])
plot(oTensor$U[[3]][,1])
plot(oTensor$U[[3]][,2])
oTensor$U[[1]]
oTensor$U[[1]][,1]
oTensor$U[[1]][,1, drop = FALSE] %*%
oTensor$U[[1]][,1, drop = FALSE] %*% oTensor$U[[2]][,1, drop = FALSE]
oTensor$U[[1]][,1, drop = FALSE] %*% t(oTensor$U[[2]][,1, drop = FALSE])
oTensor$U[[1]][,1, drop = FALSE] %*% t(oTensor$U[[2]][,1, drop = FALSE]) %*% oTensor$U[[3]][,1, drop = FALSE]
oTensor$U[[1]][,1, drop = FALSE] %*% t(oTensor$U[[2]][,1, drop = FALSE]) %*% t(oTensor$U[[3]][,1, drop = FALSE])
oTensor$U[[1]][,1, drop = FALSE] %*% t(oTensor$U[[2]][,1, drop = FALSE])
dim(oTensor$U[[1]][,1, drop = FALSE] %*% t(oTensor$U[[2]][,1, drop = FALSE]))
oTensor$U[[3]][,1, drop = FALSE]
library(rTensor)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
iTensor <- array(X, dim = c(nGenes, nGenes,10))
for(i in 1:10){
iTensor[,,i][1:50,1:50] <- iTensor[,,i][1:50,1:50] * i
}
iTensor <- as.tensor(iTensor)
oTensor <- cp(iTensor, num_components = 10)
oTensor$est@data
oTensor$est@data[,,1]
iTensor[,,i] - oTensor$est@data[,,1]
image(iTensor[,,i] - oTensor$est@data[,,1])
image(as.matrix(iTensor[,,i] - oTensor$est@data[,,1]))
iTensor[,,i] - oTensor$est@data[,,1]
oTensor$est@data[,,1]
oTensor$est@data[,,1]
image(oTensor$est@data[,,1])
image(oTensor$est@data[,,2])
image(oTensor$est@data[,,3])
image(oTensor$est@data[,,4])
image(oTensor$est@data[,,10])
oTensor <- cp(iTensor, num_components = 100)
image(oTensor$est@data[,,1])
image(oTensor$est@data[,,2])
image(oTensor$est@data[,,3])
oTensor
dim(oTensor)
dim(oTensor$est@data)
image(oTensor$est@data[,,4])
image(oTensor$est@data[,,5])
image(oTensor$est@data[,,6])
image(oTensor$est@data[,,10])
iTensor[,,i]
iTensor[,,i]@data - oTensor$est@data[,,1]
image(iTensor[,,i]@data - oTensor$est@data[,,1])
image(iTensor[,,1]@data - oTensor$est@data[,,1])
image(iTensor[,,2]@data - oTensor$est@data[,,2])
image(iTensor[,,3]@data - oTensor$est@data[,,3])
image(iTensor[,,4]@data - oTensor$est@data[,,4])
image(iTensor[,,10]@data - oTensor$est@data[,,10])
image(oTensor$est@data[,,10])
image(iTensor[,,10]@data)
image(oTensor$est@data[,,10])
image(iTensor[,,10]@data)
image(iTensor[,,10]@data)
image(oTensor$est@data[,,10])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,1])
library(rTensor)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
iTensor <- array(X, dim = c(nGenes, nGenes,10))
for(i in 1:10){
iTensor[,,i][1:50,1:50] <- iTensor[,,i][1:50,1:50] * i
}
iTensor <- as.tensor(iTensor)
oTensor <- cp(iTensor, num_components = 20)
image(iTensor[,,10]@data - oTensor$est@data[,,10])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,1])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,1])
image(oTensor$est@data[,,2])
image(oTensor$est@data[,,3])
image(oTensor$est@data[,,10])
library(rTensor)
nGenes <- 100
X <- matrix(rnorm(nGenes * nGenes), nGenes, nGenes)
X <- 0.5 * (X + t(X))
image(X)
iTensor <- array(X, dim = c(nGenes, nGenes,10))
for(i in 1:10){
iTensor[,,i][1:50,1:50] <- iTensor[,,i][1:50,1:50] * i
}
iTensor <- as.tensor(iTensor)
oTensor <- cp(iTensor, num_components = 50)
image(iTensor[,,10]@data - oTensor$est@data[,,10])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,10])
image(oTensor$est@data[,,1])
oTensor <- cp(iTensor, num_components = 50, max_iter = Inf)
oTensor <- cp(iTensor, num_components = 50, max_iter = 1000)
image(iTensor[,,10]@data - oTensor$est@data[,,10])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,1])
image(oTensor$est@data[,,10])
image(oTensor$est@data[,,1])
oTensor <- cp(iTensor, num_components = 100, max_iter = 1000)
image(iTensor[,,10]@data - oTensor$est@data[,,10])
image(iTensor[,,1]@data)
image(oTensor$est@data[,,1])
cp
image(oTensor$est@data[,,2])
image(oTensor$est@data[,,3])
image(oTensor$est@data[,,4])
source('https://raw.githubusercontent.com/dosorio/utilities/master/graphs/strictDirection.R')
matrix(c(0,2,3,4,5,0,7,20,9,10,0,12,12,14,15,0), ncol = 4, byrow = TRUE)
X <- matrix(c(0,2,3,4,5,0,7,20,9,10,0,12,12,14,15,0), ncol = 4, byrow = TRUE)
strictDirection(X)
source('https://raw.githubusercontent.com/dosorio/utilities/master/graphs/strictDirection.R')
X <- matrix(c(0,2,3,4,5,0,7,20,-9,10,0,12,12,14,15,0), ncol = 4, byrow = TRUE)
strictDirection(X)
lT <- X[lower.tri(X)]
uT <- t(X)[lower.tri(X)]
lT - uT
(lT - uT)/lT
(lT - uT)/abs(lT)
# setwd('/data/dcosorioh/manuscript/')
#
# library(Matrix)
# scTenifoldKnk <- function(countMatrix, gKO = NULL){
#   set.seed(1)
#   WT <- scTenifoldNet::makeNetworks(countMatrix, q = 0.9)
#   set.seed(1)
#   WT <- scTenifoldNet::tensorDecomposition(WT)
#   WT <- as.matrix(WT$X)
#   #KO <- rCUR::CUR(WT, sv = RSpectra::svds(WT, 5))
#   #C <- KO@C
#   #C[gKO,] <- 0
#   #KO <- C %*% KO@U %*% KO@R
#   KO <- WT
#   KO[gKO,] <- 0
#   set.seed(1)
#   MA <- scTenifoldNet::manifoldAlignment(WT, KO)
#   set.seed(1)
#   DR <- scTenifoldNet::dRegulation(MA)
#   outputList <- list()
#   outputList$WT <- WT
#   outputList$KO <- KO
#   outputList$diffRegulation <- DR
#   return(outputList)
# }
# source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
#
# WT <- readMM('TREM2/Data/matrix_WT.mtx')
# rownames(WT) <- readLines('TREM2/Data/geneNames_WT.txt')
# colnames(WT) <- readLines('TREM2/Data/barcodes_WT.txt')
# WT <- scQC(WT)
# WT <- WT[rowMeans(WT != 0) > 0.05,]
# WT <- WT[!grepl('^Rp[[:digit:]]+|^Rpl|^Rps|^Mt-', rownames(WT), ignore.case = TRUE),]
# WT <- scTenifoldKnk(WT, gKO = 'Trem2')
# save(WT, file = 'TREM2_GSE130626.RData')
library(fgsea)
library(ggplot2)
library(enrichR)
library(igraph)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotDR.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotKO.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/idConvert/hsa2mmu_SYMBOL.R')
load('../Results/GSE130626.RData')
strictDirection <- function(X){
lT <- X[lower.tri(X)]
uT <- t(X)[lower.tri(X)]
lT[abs(lT) < abs(uT)] <- 0
uT[abs(uT) < abs(lT)] <- 0
X[lower.tri(X)] <- lT
X[upper.tri(X)] <- uT
X <- Matrix::Matrix(X)
return(X)
}
library(Matrix)
X <- GSE130626$WT
setwd("~/scTenifoldKnk/inst/manuscript/TREM2/Code")
# setwd('/data/dcosorioh/manuscript/')
#
# library(Matrix)
# scTenifoldKnk <- function(countMatrix, gKO = NULL){
#   set.seed(1)
#   WT <- scTenifoldNet::makeNetworks(countMatrix, q = 0.9)
#   set.seed(1)
#   WT <- scTenifoldNet::tensorDecomposition(WT)
#   WT <- as.matrix(WT$X)
#   #KO <- rCUR::CUR(WT, sv = RSpectra::svds(WT, 5))
#   #C <- KO@C
#   #C[gKO,] <- 0
#   #KO <- C %*% KO@U %*% KO@R
#   KO <- WT
#   KO[gKO,] <- 0
#   set.seed(1)
#   MA <- scTenifoldNet::manifoldAlignment(WT, KO)
#   set.seed(1)
#   DR <- scTenifoldNet::dRegulation(MA)
#   outputList <- list()
#   outputList$WT <- WT
#   outputList$KO <- KO
#   outputList$diffRegulation <- DR
#   return(outputList)
# }
# source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
#
# WT <- readMM('TREM2/Data/matrix_WT.mtx')
# rownames(WT) <- readLines('TREM2/Data/geneNames_WT.txt')
# colnames(WT) <- readLines('TREM2/Data/barcodes_WT.txt')
# WT <- scQC(WT)
# WT <- WT[rowMeans(WT != 0) > 0.05,]
# WT <- WT[!grepl('^Rp[[:digit:]]+|^Rpl|^Rps|^Mt-', rownames(WT), ignore.case = TRUE),]
# WT <- scTenifoldKnk(WT, gKO = 'Trem2')
# save(WT, file = 'TREM2_GSE130626.RData')
library(fgsea)
library(ggplot2)
library(enrichR)
library(igraph)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotDR.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotKO.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/idConvert/hsa2mmu_SYMBOL.R')
load('../Results/GSE130626.RData')
strictDirection <- function(X){
lT <- X[lower.tri(X)]
uT <- t(X)[lower.tri(X)]
lT[abs(lT) < abs(uT)] <- 0
uT[abs(uT) < abs(lT)] <- 0
X[lower.tri(X)] <- lT
X[upper.tri(X)] <- uT
X <- Matrix::Matrix(X)
return(X)
}
library(Matrix)
X <- GSE130626$WT
lT <- X[lower.tri(X)]
uT <- t(X)[lower.tri(X)]
(lT - uT)/abs(lT)
lT/uT
plot(lT/uT)
X <- strictDirection(X)
X <- GSE130626$WT
Y <- strictDirection(X)
image(X[1:100,1:100] - Y[1:100,1:100], border=FALSE)
Z <- X[1:100,1:100] - Y[1:100,1:100]
View(Z)
as.matrix(Z)
image(as.matrix(Z))
image(Matrix(as.matrix(Z)))
image(Matrix(as.matrix(Z)), border=FALSE)
image(Z, border=FALSE)
image(X[1:200,1:200] - Y[1:200,1:200], border=FALSE)
image(X[1:500,1:500] - Y[1:500,1:500], border=FALSE)
