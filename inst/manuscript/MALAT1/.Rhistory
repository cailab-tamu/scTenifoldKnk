sapply(sG, function(g){
circos.link(nTreatment[i], which(iG %in% g), nTreatment[j], which(jG %in% g), lwd = 0.005, border = 0, col = rgb(0,0,0,0.1))
})
}
}
}
sapply(seq_along(lData), function(ct){
circos.text(x = length(lData[[ct]])/2,y =4,labels = nTreatment[ct], sector.index = nTreatment[ct],track.index = 1, facing = 'bending')
})
circos.clear()
dev.off()
seq(0, max(lengths(lData)), by = 100)
seq(1, max(lengths(lData)), by = 99)
seq(1, max(lengths(lData)), by = 100)
seq(0, max(lengths(lData)), by = 100)
cuts <- seq(0, max(lengths(lData)), by = 100)
cuts[1] <- 1
library(circlize)
lData <- readRDS('sigDE.id.celltype7.pep1.rds')
names(lData) <- gsub('.pep1', '', names(lData))
png('circosPlot.png', width = 1500, height = 1500, res = 300)
cellTypes = data.frame(cellType = factor(names(lData), levels = names(lData)),
nGenes = lengths(lData))
circos.par(start.degree = 90)
circos.initialize(cellTypes$cellType, xlim = cbind(rep(1, length(lData)), cellTypes$nGenes))
nTreatment <- names(lData)
cuts <- seq(0, max(lengths(lData)), by = 100)
cuts[1] <- 1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.axis(h = 0.4, major.at = cuts, minor.ticks = 0.1,
labels.cex = 0.5)}, bg.border = NA, track.height = 0.05)
for(i in seq_along(lData)){
for(j in seq_along(lData)){
if(j > i){
iG <- lData[[i]]
jG <- lData[[j]]
sG <- intersect(iG,jG)
sapply(sG, function(g){
circos.link(nTreatment[i], which(iG %in% g), nTreatment[j], which(jG %in% g), lwd = 0.005, border = 0, col = rgb(0,0,0,0.1))
})
}
}
}
sapply(seq_along(lData), function(ct){
circos.text(x = length(lData[[ct]])/2,y=4,labels = nTreatment[ct], sector.index = nTreatment[ct],track.index = 1, facing = 'bending')
})
circos.clear()
dev.off()
hcl.colors(length(lData))
hcl.colors(length(lData), alpha = 0.1)
library(circlize)
lData <- readRDS('sigDE.id.celltype7.pep1.rds')
names(lData) <- gsub('.pep1', '', names(lData))
png('circosPlot.png', width = 1500, height = 1500, res = 300)
cellTypes = data.frame(cellType = factor(names(lData), levels = names(lData)),
nGenes = lengths(lData))
circos.par(start.degree = 90)
circos.initialize(cellTypes$cellType, xlim = cbind(rep(1, length(lData)), cellTypes$nGenes))
nTreatment <- names(lData)
cuts <- seq(0, max(lengths(lData)), by = 100)
cuts[1] <- 1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.axis(h = 0.4, major.at = cuts, minor.ticks = 0.1,
labels.cex = 0.5)}, bg.border = NA, track.height = 0.05)
for(i in seq_along(lData)){
for(j in seq_along(lData)){
if(j > i){
iG <- lData[[i]]
jG <- lData[[j]]
sG <- intersect(iG,jG)
sapply(sG, function(g){
circos.link(nTreatment[i], which(iG %in% g), nTreatment[j], which(jG %in% g), lwd = 0.005, border = 0, col = hcl.colors(length(lData), alpha = 0.1)[i])
})
}
}
}
sapply(seq_along(lData), function(ct){
circos.text(x = length(lData[[ct]])/2,y=4,labels = nTreatment[ct], sector.index = nTreatment[ct],track.index = 1, facing = 'bending')
})
circos.clear()
dev.off()
hcl.pals()
library(circlize)
lData <- readRDS('sigDE.id.celltype7.pep1.rds')
names(lData) <- gsub('.pep1', '', names(lData))
png('circosPlot.png', width = 1500, height = 1500, res = 300)
cellTypes = data.frame(cellType = factor(names(lData), levels = names(lData)),
nGenes = lengths(lData))
circos.par(start.degree = 90)
circos.initialize(cellTypes$cellType, xlim = cbind(rep(1, length(lData)), cellTypes$nGenes))
nTreatment <- names(lData)
cuts <- seq(0, max(lengths(lData)), by = 100)
cuts[1] <- 1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.axis(h = 0.4, major.at = cuts, minor.ticks = 0.1,
labels.cex = 0.5)}, bg.border = NA, track.height = 0.05)
for(i in seq_along(lData)){
for(j in seq_along(lData)){
if(j > i){
iG <- lData[[i]]
jG <- lData[[j]]
sG <- intersect(iG,jG)
sapply(sG, function(g){
circos.link(nTreatment[i], which(iG %in% g), nTreatment[j], which(jG %in% g), lwd = 0.005, border = 0, col = hcl.colors(length(lData), 'Zissou 1', alpha = 0.1)[i])
})
}
}
}
sapply(seq_along(lData), function(ct){
circos.text(x = length(lData[[ct]])/2,y=4,labels = nTreatment[ct], sector.index = nTreatment[ct],track.index = 1, facing = 'bending')
})
circos.clear()
dev.off()
library(circlize)
lData <- readRDS('sigDE.id.celltype7.pep1.rds')
names(lData) <- gsub('.pep1', '', names(lData))
png('circosPlot.png', width = 1500, height = 1500, res = 300)
cellTypes = data.frame(cellType = factor(names(lData), levels = names(lData)),
nGenes = lengths(lData))
circos.par(start.degree = 90)
circos.initialize(cellTypes$cellType, xlim = cbind(rep(1, length(lData)), cellTypes$nGenes))
nTreatment <- names(lData)
cuts <- seq(0, max(lengths(lData)), by = 100)
cuts[1] <- 1
circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
circos.axis(h = 0.4, major.at = cuts, minor.ticks = 0.1,
labels.cex = 0.5)}, bg.border = NA, track.height = 0.05)
for(i in seq_along(lData)){
for(j in seq_along(lData)){
if(j > i){
iG <- lData[[i]]
jG <- lData[[j]]
sG <- intersect(iG,jG)
sapply(sG, function(g){
circos.link(nTreatment[i], which(iG %in% g), nTreatment[j], which(jG %in% g), lwd = 0.005, border = 0, col = hcl.colors(length(lData), 'Zissou 1', alpha = 0.2)[i])
})
}
}
}
sapply(seq_along(lData), function(ct){
circos.text(x = length(lData[[ct]])/2,y=4,labels = nTreatment[ct], sector.index = nTreatment[ct],track.index = 1, facing = 'bending')
})
circos.clear()
dev.off()
setwd("~/scTenifoldKnk/inst/manuscript/MALAT1")
library(Matrix)
library(Seurat)
library(fgsea)
library(UpSetR)
library(harmony)
library(OrderedList)
library(igraph)
library(enrichR)
library(ggplot2)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotKO.R')
#### EGO PLOT #####
png('egoMalat1.png', width = 6500,height = 5000, res = 300, pointsize = 20, bg = NA)
plotKO(MALAT1, 'Malat1')
dev.off()
#### DR ####
load('betaMALATko.RData')
write.csv(MALAT1$diffRegulation, 'drMALAT1.csv')
MALAT1$diffRegulation$gene[MALAT1$diffRegulation$p.adj < 0.05]
#### EGO PLOT #####
png('egoMalat1.png', width = 6500,height = 5000, res = 300, pointsize = 20, bg = NA)
plotKO(MALAT1, 'Malat1')
dev.off()
library(harmony)
library(Matrix)
library(Seurat)
library(harmony)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
WT <- Read10X_h5('WT.h5')
WT <- scQC(WT, mtThreshold = 0.05)
WT <- CreateSeuratObject(WT, project = 'WT')
KO <- Read10X_h5('KO.h5')
KO <- scQC(KO, mtThreshold = 0.05)
KO <- CreateSeuratObject(KO, project = 'KO')
ALL <- merge(WT,KO)
ALL <- NormalizeData(ALL)
ALL <- FindVariableFeatures(ALL)
ALL <- FindVariableFeatures(ALL)
ALL <- ScaleData(ALL)
ALL <- RunPCA(ALL)
ALL <- RunHarmony(ALL, group.by.vars = 'orig.ident')
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:20)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:20)
TSNEPlot(ALL)
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:50)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:20)
TSNEPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:50)
TSNEPlot(ALL)
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:20)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:20)
TSNEPlot(ALL)
UMAPPlot(ALL)
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:50)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:50)
TSNEPlot(ALL)
UMAPPlot(ALL)
ALL <- FindNeighbors(ALL, reduction = 'umap')
ALL <- FindNeighbors(ALL, reduction = 'umap', dims = 1:2)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
ctDE <- FindAllMarkers(ALL)
library(fgsea)
CT <- gmtPathways('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/markerGenes/mmuPanglaoDB.gmt')
cID <- 0
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
View(E)
order(1/abs(E$NES), E$padj)
E[order(1/abs(E$NES), E$padj),]
E <- E[order(1/abs(E$NES), E$padj),]
E$NES > 0 & E$padj < 0.05
E[E$NES > 0 & E$padj < 0.05,]
E <- E[E$NES > 0 & E$padj < 0.05,]
E <- E[E$NES > 0 & E$pval < 0.05,]
E$pathway[1]
cID <- 1
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$pval < 0.05,]
E$pathway[1]
View(E)
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
View(E)
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
cID <- 2
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
levels(Idents(ALL))
ctList <- sapply(levels(Idents(ALL)), function(ctID){
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
})
ctList
ctList <- sapply(levels(Idents(ALL)), function(cID){
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
})
ctList
levels(Idents(ALL))
levels(Idents(ALL)) <- ctList
TSNEPlot(ALL)
ctDE <- FindAllMarkers(ALL, min.pct = 0.05)
ALL <- FindNeighbors(ALL, reduction = 'umap', dims = 1:2)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
ctDE <- FindAllMarkers(ALL, min.pct = 0.05)
CT <- gmtPathways('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/markerGenes/mmuPanglaoDB.gmt')
ctList <- sapply(levels(Idents(ALL)), function(cID){
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
})
ctList
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
ctID <- 1
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
View(E)
cID
cID <- 1
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
E <- fgseaMultilevel(CT, FC)
View(E)
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
set.seed(1)
E <- fgseaMultilevel(CT, FC)
View(E)
E <- E[E$NES > 0,]
View(E)
levels(Idents(ALL)) <- ctList
TSNEPlot(ALL)
UMAPPlot(ALL)
TSNEPlot(ALL)
ALL <- FindClusters(ALL, resolution = 0.05)
UMAPPlot(ALL)
ALL <- FindClusters(ALL, resolution = 0.005)
UMAPPlot(ALL)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
ALL <- FindClusters(ALL, resolution = 0.001)
UMAPPlot(ALL)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
levels(Idents(ALL)) <- ctList
TSNEPlot(ALL)
UMAPPlot(ALL)
TSNEPlot(ALL)
library(ggplot2)
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:20)
UMAPPlot(ALL)
TSNEPlot(ALL)
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:20)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:20)
TSNEPlot(ALL)
ALL <- FindNeighbors(ALL, reduction = 'tsne', dims = 1:2)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
TSNEPlot(ALL)
UMAPPlot(ALL)
library(Matrix)
library(Seurat)
library(harmony)
library(fgsea)
library(ggplot2)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
WT <- Read10X_h5('WT.h5')
WT <- scQC(WT, mtThreshold = 0.05)
WT <- CreateSeuratObject(WT, project = 'WT')
KO <- Read10X_h5('KO.h5')
KO <- scQC(KO, mtThreshold = 0.05)
KO <- CreateSeuratObject(KO, project = 'KO')
ALL <- merge(WT,KO)
ALL <- NormalizeData(ALL)
ALL <- FindVariableFeatures(ALL)
ALL <- ScaleData(ALL)
ALL <- RunPCA(ALL)
ALL <- RunHarmony(ALL, group.by.vars = 'orig.ident')
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:20)
UMAPPlot(ALL)
ALL <- RunTSNE(ALL, reduction = 'harmony', dims = 1:20)
TSNEPlot(ALL)
ALL <- FindNeighbors(ALL, reduction = 'tsne', dims = 1:2)
ALL <- FindClusters(ALL, resolution = 0.01)
UMAPPlot(ALL)
ctDE <- FindAllMarkers(ALL, min.pct = 0.05)
CT <- gmtPathways('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/markerGenes/mmuPanglaoDB.gmt')
ctList <- sapply(levels(Idents(ALL)), function(cID){
FC <- ctDE$avg_logFC[ctDE$cluster %in% cID]
names(FC) <-  ctDE$gene[ctDE$cluster %in% cID]
set.seed(1)
E <- fgseaMultilevel(CT, FC)
E <- E[order(1/abs(E$NES), E$padj),]
E <- E[E$NES > 0 & E$padj < 0.05,]
E$pathway[1]
})
levels(Idents(ALL)) <- ctList
TSNEPlot(ALL)
UMAPPlot(ALL)
TSNEPlot(ALL)
TSNEPlot(ALL) + theme_bw()
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1')
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
png('malat1_CellTypes.png', width = 1000, height = 500, res = 300)
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
dev.off()
png('malat1_CellTypes.png', width = 1000, height = 500, res = 300, pointsize = 5)
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
dev.off()
ALL$orig.ident
png('malat1_Class.png', width = 1000, height = 500, res = 300, pointsize = 5)
Idents(ALL) <- ALL$orig.ident
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
dev.off()
UMAPPlot(ALL)
png('malat1_Class.png', width = 600, height = 500, res = 300, pointsize = 5)
Idents(ALL) <- ALL$orig.ident
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
dev.off()
UMAPPlot(ALL)
png('malat1_Class.png', width = 800, height = 500, res = 300, pointsize = 5)
Idents(ALL) <- ALL$orig.ident
TSNEPlot(ALL) + theme_bw() + xlab('t-SNE 1') + ylab('t-SNE 2')
dev.off()
UMAPPlot(ALL)
setwd("~/scTenifoldKnk/inst/manuscript/MALAT1")
library(Matrix)
library(Seurat)
library(fgsea)
library(UpSetR)
library(harmony)
library(OrderedList)
library(igraph)
library(enrichR)
library(ggplot2)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/plotKO.R')
mmuKEGG <- gmtPathways('https://amp.pharm.mssm.edu/Enrichr/geneSetLibrary?mode=text&libraryName=KEGG_2019_Mouse')
BIOP <- gmtPathways('https://amp.pharm.mssm.edu/Enrichr/geneSetLibrary?mode=text&libraryName=BioPlanet_2019')
REACTOME <- gmtPathways('https://amp.pharm.mssm.edu/Enrichr/geneSetLibrary?mode=text&libraryName=Reactome_2016')
goBP <- gmtPathways('https://amp.pharm.mssm.edu/Enrichr/geneSetLibrary?mode=text&libraryName=GO_Biological_Process_2018')
WP <- gmtPathways('https://amp.pharm.mssm.edu/Enrichr/geneSetLibrary?mode=text&libraryName=WikiPathways_2019_Human')
#### DE ####
WT <- readMM('WT.mtx')
rownames(WT) <- readLines('genesWT.txt')
colnames(WT) <- readLines('barcodesWT.txt')
#WT <- WT[!rownames(WT) %in% 'Malat1',]
KO <- readMM('KO.mtx')
rownames(KO) <- readLines('genesKO.txt')
colnames(KO) <- readLines('barcodesKO.txt')
#KO <- KO[!rownames(KO) %in% 'Malat1',]
WT <- CreateSeuratObject(WT, project = 'WT')
KO <- CreateSeuratObject(KO, project = 'KO')
ALL <- merge(WT,KO)
ALL <- NormalizeData(ALL)
ALL <- ScaleData(ALL)
ALL <- FindVariableFeatures(ALL, verbose = FALSE)
ALL <- RunPCA(ALL, verbose = FALSE)
ALL <- RunHarmony(ALL, group.by.vars = 'orig.ident')
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:50, verbose = FALSE)
setwd("~/scTenifoldKnk/inst/manuscript/MALAT1")
#### DE ####
WT <- readMM('WT.mtx')
library(Matrix)
library(Seurat)
library(scTenifoldKnk)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
MALAT1 <- Read10X_h5('WT.h5')
MALAT1 <- scQC(MALAT1, mtThreshold = 0.05)
MALAT1 <- CreateSeuratObject(MALAT1)
MALAT1 <- NormalizeData(MALAT1)
MALAT1 <- FindVariableFeatures(MALAT1)
MALAT1 <- ScaleData(MALAT1)
MALAT1 <- RunPCA(MALAT1, verbose = FALSE)
MALAT1 <- RunUMAP(MALAT1, dims = 1:20)
MALAT1 <- FindNeighbors(MALAT1, reduction = 'umap', dims = 1:2)
MALAT1 <- FindClusters(MALAT1, resolution = 0.05)
WT <- subset(MALAT1, idents = 0)
WT <- WT@assays$RNA@counts
WT <- WT[rowMeans(WT != 0) > 0.1,]
MALAT1 <- Read10X_h5('KO.h5')
MALAT1 <- scQC(MALAT1, mtThreshold = 0.05)
MALAT1 <- CreateSeuratObject(MALAT1)
MALAT1 <- NormalizeData(MALAT1)
MALAT1 <- FindVariableFeatures(MALAT1)
MALAT1 <- ScaleData(MALAT1)
MALAT1 <- RunPCA(MALAT1, verbose = FALSE)
MALAT1 <- RunUMAP(MALAT1, dims = 1:20)
MALAT1 <- FindNeighbors(MALAT1, reduction = 'umap', dims = 1:2)
MALAT1 <- FindClusters(MALAT1, resolution = 0.05)
KO <- subset(MALAT1, idents = 0)
KO <- KO@assays$RNA@counts
KO <- KO[rowMeans(KO != 0) > 0.1,]
writeMM(WT, 'WT.mtx')
writeLines(rownames(WT), 'genesWT.txt')
writeLines(colnames(WT), 'barcodesWT.txt')
writeMM(KO, 'KO.mtx')
writeLines(rownames(KO), 'genesKO.txt')
writeLines(colnames(KO), 'barcodesKO.txt')
MALAT1 <- scTenifoldKnk(WT, gKO = 'Malat1')
save(MALAT1, file = 'betaMALATko.RData')
library(Matrix)
library(Seurat)
library(scTenifoldKnk)
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/scQC.R')
MALAT1 <- Read10X_h5('WT.h5')
MALAT1 <- scQC(MALAT1, mtThreshold = 0.05)
MALAT1 <- CreateSeuratObject(MALAT1)
MALAT1 <- NormalizeData(MALAT1)
MALAT1 <- FindVariableFeatures(MALAT1)
MALAT1 <- ScaleData(MALAT1)
MALAT1 <- RunPCA(MALAT1, verbose = FALSE)
MALAT1 <- RunUMAP(MALAT1, dims = 1:20)
MALAT1 <- FindNeighbors(MALAT1, reduction = 'umap', dims = 1:2)
MALAT1 <- FindClusters(MALAT1, resolution = 0.05)
WT <- subset(MALAT1, idents = 0)
WT <- WT@assays$RNA@counts
WT <- WT[rowMeans(WT != 0) > 0.1,]
MALAT1 <- Read10X_h5('KO.h5')
MALAT1 <- scQC(MALAT1, mtThreshold = 0.05)
MALAT1 <- CreateSeuratObject(MALAT1)
MALAT1 <- NormalizeData(MALAT1)
MALAT1 <- FindVariableFeatures(MALAT1)
MALAT1 <- ScaleData(MALAT1)
MALAT1 <- RunPCA(MALAT1, verbose = FALSE)
MALAT1 <- RunUMAP(MALAT1, dims = 1:20)
MALAT1 <- FindNeighbors(MALAT1, reduction = 'umap', dims = 1:2)
MALAT1 <- FindClusters(MALAT1, resolution = 0.05)
KO <- subset(MALAT1, idents = 0)
KO <- KO@assays$RNA@counts
KO <- KO[rowMeans(KO != 0) > 0.1,]
writeMM(WT, 'WT.mtx')
writeLines(rownames(WT), 'genesWT.txt')
writeLines(colnames(WT), 'barcodesWT.txt')
writeMM(KO, 'KO.mtx')
writeLines(rownames(KO), 'genesKO.txt')
writeLines(colnames(KO), 'barcodesKO.txt')
# MALAT1 <- scTenifoldKnk(WT, gKO = 'Malat1')
# save(MALAT1, file = 'betaMALATko.RData')
