require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(100), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
#png('../Results/cl_MECP2.png', width = 1800, height = 1000, res = 300, pointsize = 20)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour='WT\nKO')) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top", axis.title.x = element_text(size = 18), axis.title.y = element_text(size = 18))
#dev.off()
}
compareList <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
#png('../Results/cl_MECP2.png', width = 1800, height = 1000, res = 300, pointsize = 20)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour='WT\nKO')) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
#dev.off()
}
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
CLB <- compareList(realList,drList,B = 5, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
CLB <- compareList(realList,drList,B = 5, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
compareList
source('https://raw.githubusercontent.com/dosorio/utilities/master/singleCell/compareLists.R')
compareList
compareLists <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour='WT\nKO')) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
}
CLB <- compareList(realList,drList,B = 5, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
compareLists <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour= label)) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
}
CLB <- compareList(realList,drList,B = 5, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
compareLists <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour= label)) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
}
CLB <- compareList(realList,drList,B = 2, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
compareLists <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour= label)) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
}
compareList <- function(gList1, gList2, B = 100, label = 'L'){
require(pbapply)
require(ggplot2)
overlapR <- pbsapply(seq_len(B), function(Z){
nRanks <- min(c(length(gList1), length(gList2)))
rList1 <- sample(gList1)
rList2 <- sample(gList2)
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(rList1[seq_len(X)], rList2[seq_len(X)]))
})
return(rOverlap)
})
nRanks <- min(c(length(gList1), length(gList2)))
rOverlap <- sapply(seq_len(nRanks), function(X){
length(intersect(gList1[seq_len(X)], gList2[seq_len(X)]))
})
listComparison <- data.frame(
rank = seq_len(nRanks),
real = rOverlap,
expLB = apply(overlapR,1,mean) - 5* apply(overlapR,1,sd),
exp = apply(overlapR,1,mean),
expUB = apply(overlapR,1,mean) + 5* apply(overlapR,1,sd)
)
ggplot(data = listComparison, mapping = aes(x = rank, y = real)) +
geom_line(mapping = aes(colour= label)) +
geom_ribbon(mapping = aes(ymin=expLB, ymax=expUB), alpha=0.3, fill = "#E69F00") +
geom_line(mapping = aes(x = rank, y = exp, colour='Expected by\nrandom')) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
theme_bw() + xlab('Rank') + ylab('Size of Overlap') + ylim(c(0,7776)) + xlim(c(0,7776)) +
scale_fill_manual(name="Overlap:",aesthetics = 'colour', values=c("#E69F00","#999999")) +
theme(legend.position="top")
}
CLB <- compareList(realList,drList,B = 2, label = 'scTenifoldNet vs scTenifoldKnk')
CLB
CLB <- compareList(realList,drList,B = 2, label = 'scTenifoldNet vs\nscTenifoldKnk')
CLB
CLB <- compareList(realList,drList,B = 100, label = 'scTenifoldNet vs\nscTenifoldKnk')
CLB
png('cl2_Ahr.png', width = 1000, height = 1000, res = 300)
CLB
dev.off()
png('cl2_Ahr.png', width = 1200, height = 1200, res = 300)
CLB
dev.off()
CLA <- compareList(deList,drList,B = 100, label = 'MAST (abs FC) vs\nscTenifoldKnk')
CLA
png('cl1_Ahr.png', width = 1200, height = 1200, res = 300)
CLA
dev.off()
setwd("~/scTenifoldKnk/inst/manuscript/AHR/Code")
load('../Results/Preenterocytes.RData')
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
drZ <- DR$Z
names(drZ) <- toupper(DR$gene)
drList <- DR$gene
deList <- deList[deList %in% drList]
drList <- drList[drList %in% deList]
load('../Results/Preenterocytes.RData')
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
library(fgsea)
load('../Results/Preenterocytes.RData')
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
install.packages('clustermole')
library(clustermole)
install.packages('clustermole', dependencies = TRUE)
library(clustermole)
BiocManager::install('GSVA')
library(clustermole)
clustermole_markers()
M <- clustermole_markers()
View(M)
load('../Results/Preenterocytes.RData')
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
#DR <- O$diffRegulation
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
drZ <- DR$Z
names(drZ) <- toupper(DR$gene)
drZ <- DR$Z
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
#DR <- O$diffRegulation
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
drZ <- DR$Z
names(drZ) <- toupper(DR$gene)
# drZ <- DR$Z
# names(drZ) <- toupper(DR$gene)
# CT <- read.table('PanglaoDB_markers_27_Mar_2020.tsv.gz', sep = '\t', header = TRUE)
# CT <- CT[CT$organ %in% 'GI tract',]
CT <- clustermole::clustermole_markers()
CT$species %in% 'Mouse'
CT[CT$species %in% 'Mouse',]
CT <- CT[CT$species %in% 'Mouse',]
View(CT)
grepl('Intest', CT$organ, ignore.case = TRUE)
CT[grepl('Intest', CT$organ, ignore.case = TRUE),]
CT <- CT[grepl('Intest', CT$organ, ignore.case = TRUE),]
CT$celltype
lapply(CT$celltype, function(X){
lapply(CT$celltype, function(X){
unique(CT$gene[CT$celltype %in% X])
})
lapply(CT$celltype, function(X){
unique(CT$gene[CT$celltype %in% X])
})
lapply(CT$celltype, function(X){
unique(CT$gene[CT$celltype %in% X])
})
ctNames <- unique(CT$celltype)
lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
CT <- lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT)
names(CT) <- ctNames
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
E <- fgseaMultilevel(CT, drZ)
View(E)
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
#DR <- O$diffRegulation
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
drZ <- DR$Z
names(drZ) <- toupper(DR$gene)
# drZ <- DR$Z
# names(drZ) <- toupper(DR$gene)
# CT <- read.table('PanglaoDB_markers_27_Mar_2020.tsv.gz', sep = '\t', header = TRUE)
# CT <- CT[CT$organ %in% 'GI tract',]
CT <- clustermole::clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[grepl('Intest', CT$organ, ignore.case = TRUE),]
ctNames <- unique(CT$celltype)
CT <- lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
load('../Results/Preenterocytes.RData')
MA <- O$manifoldAlignment
MA <- MA[!grepl('_MT-|_RPL|_RPS',rownames(MA), ignore.case = TRUE),]
DR <- scTenifoldNet::dRegulation(MA)
#DR <- O$diffRegulation
DR$FC <- (DR$distance^2)/mean(DR$distance[-1]^2)
DR$p.value <- pchisq(DR$FC, df = 1, lower.tail = FALSE)
DR$p.adj <- p.adjust(DR$p.value, method = 'fdr')
O$diffRegulation <- DR
drZ <- DR$Z
names(drZ) <- toupper(DR$gene)
# drZ <- DR$Z
# names(drZ) <- toupper(DR$gene)
# CT <- read.table('PanglaoDB_markers_27_Mar_2020.tsv.gz', sep = '\t', header = TRUE)
# CT <- CT[CT$organ %in% 'GI tract',]
CT <- clustermole::clustermole_markers()
CT <- CT[CT$species %in% 'Mouse',]
CT <- CT[grepl('Intest', CT$organ, ignore.case = TRUE),]
ctNames <- unique(CT$celltype)
CT <- lapply(ctNames, function(X){
unique(CT$gene[CT$celltype %in% X])
})
names(CT) <- ctNames
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, drZ)
View(DR)
View(E)
plotEnrichment(CT$`Goblet cell`, drZ)
plotEnrichment(CT$`Paneth cell`, drZ)
plotEnrichment(CT$`Transit amplifying (TA) cell`, drZ)
plotEnrichment(CT$Enterocyte, drZ)
setwd("~/scTenifoldKnk/inst/manuscript/AHR/Code")
library(Matrix)
library(Seurat)
library(harmony)
WT <- readMM('../Data/Preenterocytes_WT.mtx')
rownames(WT) <- readLines('../Data/Preenterocytes_WT_genes.txt')
colnames(WT) <- readLines('../Data/Preenterocytes_WT_barcodes.txt')
WT <- WT[!grepl('^MT-|^RPL|^RPS',rownames(WT), ignore.case = TRUE),]
KO <- readMM('../Data/Preenterocytes_KO.mtx')
rownames(KO) <- readLines('../Data/Preenterocytes_KO_genes.txt')
colnames(KO) <- readLines('../Data/Preenterocytes_KO_barcodes.txt')
KO <- KO[!grepl('^MT-|^RPL|^RPS',rownames(KO), ignore.case = TRUE),]
WT <- CreateSeuratObject(WT, project = 'WT')
KO <- CreateSeuratObject(KO, project = 'KO')
ALL <- merge(WT,KO)
ALL <- NormalizeData(ALL)
ALL <- ScaleData(ALL)
ALL <- FindVariableFeatures(ALL)
ALL <- RunPCA(ALL)
ALL <- RunHarmony(ALL, group.by.vars = 'orig.ident')
ALL <- RunTSNE(ALL, reduction = 'harmony')
ALL <- RunUMAP(ALL, reduction = 'harmony', dims = 1:50)
UMAPPlot(ALL)
DE <- FindMarkers(ALL, ident.1 = 'KO', ident.2 = 'WT', test.use = 'MAST', logfc.threshold = 0)
DE <- DE[order(abs(DE$avg_logFC), decreasing = TRUE),]
deList <- rownames(DE)
deZ <- abs(DE$avg_logFC)
names(deZ) <- toupper(rownames(DE))
deZ
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
E <- fgseaMultilevel(CT, deZ)
View(E)
plotEnrichment(CT$Enterocyte, deZ)
DE <- FindMarkers(ALL, ident.1 = 'KO', ident.2 = 'WT', test.use = 'MAST', logfc.threshold = 0, min.pct = 0.05)
DE <- DE[order(abs(DE$avg_logFC), decreasing = TRUE),]
deList <- rownames(DE)
deZ <- abs(DE$avg_logFC)
names(deZ) <- toupper(rownames(DE))
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
E <- fgseaMultilevel(CT, deZ)
plotEnrichment(CT$Enterocyte, deZ)
View(DE)
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
library(ggplot2)
E <- fgseaMultilevel(CT, deZ)
plotEnrichment(CT$Enterocyte, deZ)
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score')
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes')
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('FDR = ', ))
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('FDR = ' ))
E$pathway == 'Enterocyte'
E$padj[E$pathway == 'Enterocyte']
formatC(E$padj[E$pathway == 'Enterocyte'], 2)
formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
DE <- FindMarkers(ALL, ident.1 = 'KO', ident.2 = 'WT', test.use = 'MAST', logfc.threshold = 0)
DE <- DE[order(abs(DE$avg_logFC), decreasing = TRUE),]
deList <- rownames(DE)
deZ <- abs(DE$avg_logFC)
names(deZ) <- toupper(rownames(DE))
# CM <- gmtPathways('../Data/CannonicalMarkers.txt')
# CM <- lapply(CM, toupper)
library(ggplot2)
E <- fgseaMultilevel(CT, deZ)
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
drZ > 0
drZ2 <- drZ[drZ > 0]
E <- fgseaMultilevel(CT, drZ2)
plotEnrichment(CT$Enterocyte, drZ2) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'scTenifoldKnk - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'scTenifoldKnk - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e')))
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'scTenifoldKnk - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + + theme_bw() + theme(plot.title = element_text(size=20))
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'scTenifoldKnk - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
png('DE_gseaMarkers.png', width = 1000, height = 1000, res = 300)
E <- fgseaMultilevel(CT, deZ)
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'MAST - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
dev.off()
png('DR_gseaMarkers.png', width = 1000, height = 1000, res = 300)
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'scTenifoldKnk - Enterocytes', subtitle = paste0('FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
dev.off()
png('DR_gseaMarkers.png', width = 1000, height = 1000, res = 300)
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('scTenifoldKnk FDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
dev.off()
png('DR_gseaMarkers.png', width = 1000, height = 1000, res = 300)
E <- fgseaMultilevel(CT, drZ)
plotEnrichment(CT$Enterocyte, drZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('scTenifoldKnk\nFDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
dev.off()
png('DE_gseaMarkers.png', width = 1000, height = 1000, res = 300)
E <- fgseaMultilevel(CT, deZ)
plotEnrichment(CT$Enterocyte, deZ) + xlab('Gene rank') + ylab('Enrichment Score') + labs(title = 'Enterocytes', subtitle = paste0('MAST\nFDR = ', formatC(E$padj[E$pathway == 'Enterocyte'], 2, format = 'e'))) + theme_bw() + theme(plot.title = element_text(size=20))
dev.off()
